---
description: 
globs: 
alwaysApply: false
---
# Cursor Rule: Backend Python e Arquitetura para MicroDetect

## I. Introdução e Princípios Gerais

### Visão Geral

Este documento define os padrões de desenvolvimento, arquitetura e design para o backend Python do MicroDetect. O backend oferece uma API para a interface Flutter, funcionalidades de detecção de microorganismos usando modelos YOLOv8.

### Princípios Arquiteturais

1. **Modularidade**: Código organizado em módulos funcionais independentes
2. **Desacoplamento**: Baixo acoplamento entre componentes
3. **Escalabilidade**: Arquitetura que permite crescimento e expansão futura
4. **Performance**: Otimização para processamento de imagens e operações com modelos de ML
5. **Manutenibilidade**: Código limpo, documentado e testável

### Tecnologias Fundamentais

- **FastAPI**: Framework para API REST
- **PyTorch/Ultralytics**: Biblioteca para modelos YOLO
- **OpenCV**: Processamento de imagens
- **SQLite/SQLAlchemy**: Armazenamento de metadados
- **Schemas Personalizados**: Sistema próprio para validação de dados e serialização

## II. Estrutura do Projeto

### Organização de Pastas

```
microdetect_api/
├── microdetect/
│   ├── __init__.py               # Versão e inicializadores
│   ├── server.py                 # Configuração do servidor FastAPI
│   ├── cli.py                    # Interface de linha de comando
│   ├── api/                      # Rotas da API
│   │   ├── __init__.py           # Router principal
│   │   └── endpoints/            # Endpoints específicos
│   ├── core/                     # Configurações e utilitários core
│   ├── database/                 # Modelos e conexão com banco
│   │   └── migrations/           # Migrações Alembic
│   ├── models/                   # Modelos de dados SQLAlchemy
│   ├── schemas/                  # Schemas para serialização
│   ├── services/                 # Serviços de negócio
│   └── utils/                    # Utilitários
├── tests/                        # Testes
├── setup.py                      # Configuração do pacote
├── requirements.txt              # Dependências
├── alembic.ini                   # Configuração do Alembic
└── README.md                     # Documentação
```

### Convenções de Codificação

- **Arquivos/Módulos**: snake_case.py
- **Classes**: PascalCase
- **Funções/Variáveis**: snake_case
- **Constantes**: SNAKE_CASE

## III. API Design

### Princípios da API

1. **RESTful**: Seguir princípios RESTful para design de endpoints
2. **Versionamento**: Suporte a versionamento de API (/api/v1/...)
3. **Consistência**: Padrões consistentes para endpoints e respostas
4. **Documentação**: Documentação automática via FastAPI/Swagger

### Estrutura de Endpoints

- **/api/v1/datasets**: Gerenciamento de datasets para treinamento
- **/api/v1/images**: Gerenciamento de imagens individuais
- **/api/v1/annotations**: Gerenciamento de anotações de objetos
- **/api/v1/training**: Gerenciamento de treinamento de modelos
- **/api/v1/models**: Gerenciamento de modelos treinados
- **/api/v1/inference**: Endpoints para detecção em imagens
- **/api/v1/system**: Informações e configurações do sistema

### WebSockets

- **/ws/training/{id}**: Streaming de progresso de treinamento
- **/ws/inference/{id}**: Streaming de resultados de inferência em tempo real

## IV. Banco de Dados

### Modelos Principais

1. **Dataset**: Coleção de imagens para treinamento/validação/teste
2. **Image**: Imagens individuais com metadados
3. **Annotation**: Anotações para imagens (bounding boxes, classes)
4. **DatasetImage**: Relação entre datasets e imagens
5. **TrainingSession**: Sessões de treinamento de modelos
6. **Model**: Modelos treinados com metadados
7. **InferenceResult**: Resultados de inferência

### Relacionamentos

- Um Dataset contém muitas Images através de DatasetImage
- Uma Image pode ter muitas Annotations
- Um Dataset está associado a muitas TrainingSessions
- Uma TrainingSession resulta em um Model
- Um Model gera muitos InferenceResults

## V. Sistema de Schemas

### Abordagem de Serialização

O MicroDetect API implementa um sistema personalizado de schemas em vez de usar o Pydantic:

1. **BaseSchema**: Classe base em `microdetect/schemas/base.py` que fornece:
   - Inicialização via `__init__`
   - Serialização para dicionário via método `dict()`
   - Conversão de objetos ORM para schemas via método `from_orm()`

2. **Schemas Especializados**:
   - `dataset.py`: Schemas para datasets
   - `image.py`: Schemas para imagens
   - `annotation.py`: Schemas para anotações
   - `model.py`: Schemas para modelos
   - `training_session.py`: Schemas para sessões de treinamento
   - `inference_result.py`: Schemas para resultados de inferência

3. **Utilitários de Serialização**:
   - Conversão de objetos Python para JSON
   - Construção de respostas da API padronizadas

## VI. Processamento de Imagens

### Pipeline de Processamento

1. **Aquisição**: Upload de imagens via API
2. **Pré-processamento**: Normalização, ajustes básicos
3. **Armazenamento**: Imagens organizadas por datasets
4. **Anotação**: Interface para anotação manual e automática
5. **Augmentação**: Técnicas de augmentação para treinamento
6. **Exportação**: Formatos compatíveis com YOLO

### Serviço de Imagem

O `image_service.py` implementa funcionalidades como:
- Upload e armazenamento de imagens
- Geração de thumbnails
- Conversão entre formatos
- Aplicação de transformações básicas

## VII. Treinamento e Inferência

### Processo de Treinamento

1. **Preparação de Dados**: Organização de imagens e anotações no formato YOLO
2. **Configuração**: Definição de hiperparâmetros via API
3. **Execução**: Treinamento assíncrono com callbacks de progresso
4. **Monitoramento**: Métricas em tempo real via WebSockets
5. **Avaliação**: Métricas de desempenho em conjunto de validação
6. **Exportação**: Salvamento do modelo treinado

### Sistema de Inferência

1. **Carregamento de Modelo**: Via `model_service.py`
2. **Detecção**: Execução do modelo em imagens novas
3. **Pós-processamento**: Filtragem por confiança, NMS
4. **Visualização**: Geração de imagens com anotações visuais
5. **Persistência**: Armazenamento de resultados no banco de dados

## VIII. Sistema de Arquivos

### Estrutura de Diretórios

O sistema utiliza uma estrutura padrão em `~/.microdetect/`:
```
~/.microdetect/
├── data/
│   ├── datasets/          # Datasets organizados
│   ├── models/            # Modelos treinados
│   ├── images/            # Imagens originais
│   ├── gallery/           # Imagens de galeria
│   ├── temp/              # Arquivos temporários
│   └── static/            # Arquivos estáticos
```

### Inicialização de Diretórios

O método `setup_user_directories()` no `server.py` garante que todos os diretórios necessários sejam criados durante a inicialização da aplicação.

## IX. Execução do Backend

### Modos de Operação

1. **Servidor Web**: Via `start_server()` em `server.py`
2. **CLI**: Interface de linha de comando em `cli.py`
3. **Importação como Biblioteca**: Para uso em outros projetos Python

### Configuração

O módulo `core/config.py` centraliza todas as configurações da aplicação:
- Caminhos de diretórios
- Configurações de banco de dados
- Parâmetros do servidor
- Opções de modelos ML

## X. Tratamento de Erros

### Estratégia de Tratamento de Erros

1. **Validação de Entrada**: Validação rigorosa em schemas
2. **Exceções Específicas**: Para diferentes tipos de erros
3. **Respostas Padronizadas**: Formato consistente para erros da API
4. **Logging**: Sistema de logging abrangente

## XI. Testes

### Estratégia de Testes

O arquivo `test_endpoints.py` implementa testes abrangentes para os endpoints da API, cobrindo:
- Operações CRUD para todos os recursos
- Casos de erro e validação
- Fluxos completos de processamento

## XII. Desenvolvimento e Contribuição

### Processo de Desenvolvimento

1. **Versionamento**: Atualizar a versão em `microdetect/__init__.py`
2. **Documentação**: Manter README.md atualizado
3. **Testes**: Executar e atualizar testes via pytest
4. **Dependências**: Gerenciar via requirements.txt

### Packaging

O projeto utiliza `setup.py` para configuração do pacote, permitindo:
- Instalação via pip
- Distribuição como biblioteca
- Execução de comandos via CLI

## XIII. Considerações de Deployment

### Empacotamento com Flutter

- Após modificar o backend, atualizar a versão no `version.txt`
- Empacotar o diretório `python_backend` e colocá-lo na pasta de assets do Flutter
- O aplicativo Flutter gerencia o ciclo de vida do backend

## XIV. Referências e Recursos

- **Documentação**: README.md contém informações detalhadas de uso
- **Testes**: Exemplos de uso na pasta tests/
- **API Docs**: Disponível em `/docs` quando o servidor está rodando